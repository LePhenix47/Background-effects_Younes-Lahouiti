(()=>{"use strict";(()=>{const{log:n,error:t,table:e,time:a,timeEnd:i,timeStamp:s,timeLog:r,assert:o,clear:c,count:h,countReset:l,group:d,groupCollapsed:b,groupEnd:v,trace:m,profile:u,profileEnd:g,warn:p,debug:f,info:C,dir:w,dirxml:y}=console;class x{}function k(n){return n.getContext("2d")}function A(n,t,e){n.width=t,n.height=e}function S(n,t){var e;if(!t)return document.querySelector(n);return(null===(e=null==t?void 0:t.tagName)||void 0===e?void 0:e.includes("-"))?t.shadowRoot.querySelector(n):t.querySelector(n)}const M="\n:host {\n    --bg-primary: #fafafa;\n    --color-primary: #323232;\n    --semi-transparent-bg: hsla(0, 0%, 100%, .7);\n    --border-color: #dbdbdb;\n    --scrollbar-track-bg-color: #fff;\n    --scrollbar-thumb-bg-color: #545454;\n    --scrollbar-thumb-bg-color--hover: #757575;\n    --scrollbar-thumb-bg-color--active: #b0b0b0\n}\n\n::backdrop {\n    --backdrop-bg-color: hsla(0, 0%, 100%, .5);\n    --scrollbar-track-bg-color: #fff;\n    --scrollbar-thumb-bg-color: #545454;\n    --scrollbar-thumb-bg-color--hover: #757575;\n    --scrollbar-thumb-bg-color--active: #b0b0b0\n}\n",H="\n\n@media(prefers-color-scheme:dark) {\n    :host {\n        --bg-primary: #050505;\n        --color-primary: #cdcdcd;\n        --semi-transparent-bg: rgba(0, 0, 0, .7);\n        --scrollbar-track-bg-color: #000;\n        --scrollbar-thumb-bg-color: #ababab;\n        --scrollbar-thumb-bg-color--hover: #8a8a8a;\n        --scrollbar-thumb-bg-color--active: #4f4f4f;\n        --selection-bg: #838383;\n        --selection-color: #fff\n    }\n\n    ::backdrop {\n        --backdrop-bg-color: rgba(0, 0, 0, .5);\n        --scrollbar-track-bg-color: #000;\n        --scrollbar-thumb-bg-color: #ababab;\n        --scrollbar-thumb-bg-color--hover: #8a8a8a;\n        --scrollbar-thumb-bg-color--active: #4f4f4f\n    }\n}\n",T="\n@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;500;700&display=swap);\n\n@media(prefers-reduced-motion:reduce) {\n    *, :after, :before {\n        animation: none !important;\n        transition: none !important\n    }\n}\n\n*, :after, :before {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0\n}\n\n::-moz-selection {\n    -webkit-text-stroke: transparent;\n    background-color: var(--selection-bg-color);\n    color: currentColor\n}\n\n::selection {\n    -webkit-text-stroke: transparent;\n    background-color: var(--selection-bg-color);\n    color: currentColor\n}\n\n:is(ul, ol) {\n    list-style-type: none\n}\n\nbutton {\n    background-color: transparent;\n    border-color: transparent;\n    color: inherit;\n    font-family: inherit\n}\n\nbutton:hover {\n    cursor: pointer\n}\n\nbutton:hover:disabled {\n    cursor: not-allowed\n}\n\ninput {\n    font-family: inherit\n}\n\ninput, input:focus {\n    border-color: transparent\n}\n\ninput:focus {\n    outline: transparent\n}\n\ntextarea {\n    font-family: inherit\n}\n\ntextarea, textarea:focus {\n    border-color: transparent\n}\n\ntextarea:focus {\n    outline: transparent\n}\n\na {\n    color: inherit;\n    text-decoration: none\n}\n\na:visited {\n    color: currentColor\n}\n\nlabel:hover {\n    cursor: pointer\n}\n\nfieldset {\n    border-color: transparent\n}\n\nlegend {\n    position: static\n}\n\ndialog {\n    inset: 50%;\n    margin: 0;\n    padding: 0;\n    position: fixed;\n    translate: -50% -50%;\n    z-index: 0\n}\n\ndialog, select {\n    border: transparent\n}\n\nselect {\n    font-family: inherit\n}\n\nselect:hover {\n    cursor: pointer\n}\n\noption {\n    font-family: inherit\n}\n\n:is(p, h1, h2, h3, h4, h5, h6, span):empty {\n    display: none !important\n}\n\n\n::-webkit-scrollbar {\n    background-color: var(--scrollbar-track-bg-color);\n    border-radius: 100vmax;\n    margin-block: 15px;\n    width: 10px\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: var(--scrollbar-thumb-bg-color);\n    border: 3px solid var(--bg-primary);\n    border-radius: 100vmax\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background-color: var(--scrollbar-thumb-bg-color--hover)\n}\n\n::-webkit-scrollbar-thumb:active {\n    background-color: var(--scrollbar-thumb-bg-color--active)\n}\n\n@supports(scrollbar-color:black white) {\n    :root {\n        scrollbar-color: var(--scrollbar-thumb-bg-color) var(--scrollbar-track-bg-color);\n        scrollbar-width: thin\n    }\n}\n",z=document.createElement("template");z.innerHTML=`\n  <style>\n    /* Reset */\n    ${M}\n    ${T}\n    ${H}\n    /* Actual style */\n    \n .web-component__canvas{\n    position: absolute;\n\n    width: 100%;\n    height: 100%;\n }\n\n .web-component__title{\n  position: relative;\n\n  z-index: 69420;\n\n  padding: 15px;\n\n  font-size: 3vw;\n  border: 3px solid currentColor;\n  border-bottom: transparent;\n }\n\n  </style>\n  \n  \n <canvas class="web-component__canvas"></canvas>\n <h2 class="web-component__title">Boucing effect</h2> \n\n`;class E extends HTMLElement{constructor(){super(),this.animateCanvas=this.animateCanvas.bind(this),this.resetCanvasToMatchScreen=this.resetCanvasToMatchScreen.bind(this);const n=this.attachShadow({mode:"open"}),t=z.content.cloneNode(!0);n.appendChild(t),this.canvas=S("canvas",this.shadowRoot),this.context=k(this.canvas),this.effectHandler=new x,this.resizeCanvas()}static get observedAttributes(){return["is-playing"]}get isPlaying(){const n=this.getAttribute("is-playing");return JSON.parse(n)}set isPlaying(n){const t=n.toString();this.setAttribute("is-playing",t)}connectedCallback(){this.effectHandler=new x,A(this.canvas,this.clientWidth,this.clientHeight),window.addEventListener("resize",this.resetCanvasToMatchScreen)}resizeCanvas(){A(this.canvas,this.clientWidth,this.clientHeight)}resetCanvasToMatchScreen(){!this.isPlaying||(this.resizeCanvas(),this.cancelCanvasAnimation(),this.effectHandler=new x,this.animateCanvas())}animateCanvas(){this.context.fillStyle="rgba(0,0,0,10%)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.animationId=requestAnimationFrame(this.animateCanvas)}cancelCanvasAnimation(){cancelAnimationFrame(this.animationId)}disconnectedCallback(){window.removeEventListener("resize",this.resetCanvasToMatchScreen)}attributeChangedCallback(n,t,e){switch(n){case"is-playing":"true"===e?this.animateCanvas():this.cancelCanvasAnimation();break}}}customElements.define("falling-particles",E);class _{}const L=document.createElement("template");L.innerHTML=`\n  <style>\n    /* Reset */\n    ${M}\n    ${T}\n    ${H}\n    /* Actual style */\n    \n .web-component__canvas{\n    position: absolute;\n\n    width: 100%;\n    height: 100%;\n }\n\n  </style>\n  \n  \n <canvas class="web-component__canvas"></canvas>\n\n`;class P extends HTMLElement{constructor(){super(),this.animateCanvas=this.animateCanvas.bind(this),this.resetCanvasToMatchScreen=this.resetCanvasToMatchScreen.bind(this);const n=this.attachShadow({mode:"open"}),t=L.content.cloneNode(!0);n.appendChild(t),this.canvas=S("canvas",this.shadowRoot),this.context=k(this.canvas),this.effectHandler=new _,this.resizeCanvas()}static get observedAttributes(){return["is-playing"]}get isPlaying(){const n=this.getAttribute("is-playing");return JSON.parse(n)}set isPlaying(n){const t=n.toString();this.setAttribute("is-playing",t)}connectedCallback(){this.effectHandler=new _,A(this.canvas,this.clientWidth,this.clientHeight),window.addEventListener("resize",this.resetCanvasToMatchScreen)}resizeCanvas(){A(this.canvas,this.clientWidth,this.clientHeight)}resetCanvasToMatchScreen(){!this.isPlaying||(this.resizeCanvas(),this.cancelCanvasAnimation(),this.effectHandler=new _,this.animateCanvas())}animateCanvas(){this.context.fillStyle="rgba(0,0,0,10%)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.animationId=requestAnimationFrame(this.animateCanvas)}cancelCanvasAnimation(){cancelAnimationFrame(this.animationId)}disconnectedCallback(){window.removeEventListener("resize",this.resetCanvasToMatchScreen)}attributeChangedCallback(n,t,e){switch(n){case"is-playing":"true"===e?this.animateCanvas():this.cancelCanvasAnimation();break}}}customElements.define("fire-effect",P);class R{}const $=document.createElement("template");$.innerHTML=`\n  <style>\n    /* Reset */\n    ${M}\n    ${T}\n    ${H}\n    /* Actual style */\n    \n  .web-component__canvas{\n    position: absolute;\n\n    width: 100%;\n    height: 100%;\n }\n\n  </style>\n  \n  \n <canvas class="web-component__canvas"></canvas>\n\n`;class I extends HTMLElement{constructor(){super(),this.animateCanvas=this.animateCanvas.bind(this),this.resetCanvasToMatchScreen=this.resetCanvasToMatchScreen.bind(this);const n=this.attachShadow({mode:"open"}),t=$.content.cloneNode(!0);n.appendChild(t),this.canvas=S("canvas",this.shadowRoot),this.context=k(this.canvas),this.effectHandler=new R,this.resizeCanvas()}static get observedAttributes(){return["is-playing"]}get isPlaying(){const n=this.getAttribute("is-playing");return JSON.parse(n)}set isPlaying(n){const t=n.toString();this.setAttribute("is-playing",t)}connectedCallback(){this.effectHandler=new R,A(this.canvas,this.clientWidth,this.clientHeight),window.addEventListener("resize",this.resetCanvasToMatchScreen)}resizeCanvas(){A(this.canvas,this.clientWidth,this.clientHeight)}resetCanvasToMatchScreen(){!this.isPlaying||(this.resizeCanvas(),this.cancelCanvasAnimation(),this.effectHandler=new R,this.animateCanvas())}animateCanvas(){this.context.fillStyle="rgba(0,0,0,10%)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.animationId=requestAnimationFrame(this.animateCanvas)}cancelCanvasAnimation(){cancelAnimationFrame(this.animationId)}disconnectedCallback(){window.removeEventListener("resize",this.resetCanvasToMatchScreen)}attributeChangedCallback(n,t,e){switch(n){case"is-playing":"true"===e?this.animateCanvas():this.cancelCanvasAnimation();break}}}customElements.define("matrix-effect",I);class N{}const F=document.createElement("template");F.innerHTML=`\n  <style>\n    /* Reset */\n    ${M}\n    ${T}\n    ${H}\n    /* Actual style */\n    \n  .web-component__canvas{\n    position: absolute;\n\n    width: 100%;\n    height: 100%;\n }\n\n  </style>\n  \n  \n <canvas class="web-component__canvas"></canvas>\n\n`;class W extends HTMLElement{constructor(){super(),this.animateCanvas=this.animateCanvas.bind(this),this.resetCanvasToMatchScreen=this.resetCanvasToMatchScreen.bind(this);const n=this.attachShadow({mode:"open"}),t=F.content.cloneNode(!0);n.appendChild(t),this.canvas=S("canvas",this.shadowRoot),this.context=k(this.canvas),this.effectHandler=new N,this.resizeCanvas()}static get observedAttributes(){return["is-playing"]}get isPlaying(){const n=this.getAttribute("is-playing");return JSON.parse(n)}set isPlaying(n){const t=n.toString();this.setAttribute("is-playing",t)}connectedCallback(){this.effectHandler=new N,A(this.canvas,this.clientWidth,this.clientHeight),window.addEventListener("resize",this.resetCanvasToMatchScreen)}resizeCanvas(){A(this.canvas,this.clientWidth,this.clientHeight)}resetCanvasToMatchScreen(){!this.isPlaying||(this.resizeCanvas(),this.cancelCanvasAnimation(),this.effectHandler=new N,this.animateCanvas())}animateCanvas(){this.context.fillStyle="rgba(0,0,0,10%)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.animationId=requestAnimationFrame(this.animateCanvas)}cancelCanvasAnimation(){cancelAnimationFrame(this.animationId)}disconnectedCallback(){window.removeEventListener("resize",this.resetCanvasToMatchScreen)}attributeChangedCallback(n,t,e){switch(n){case"is-playing":"true"===e?this.animateCanvas():this.cancelCanvasAnimation();break}}}function q(n,t,e=!0,a=!0){if(n>t||t<n)throw new Error("Unexpected error occured in the passed argument values: min > max or max < min");const i=e&&!a,s=!e&&a;return e&&a?Math.floor(Math.random()*(t-n+1))+n:i?Math.floor(Math.random()*(t-n))+n:s?Math.floor(Math.random()*(t-n))+n+1:Math.floor(Math.random()*(t-n-1))+n+1}customElements.define("metaballs-effect",W);class J{constructor(n,t,e){this.context=n,this.width=t,this.height=e,this.x=q(0,t),this.y=q(0,e),this.radius=q(.5,3),this.vectorX=q(-2,2),this.vectorY=q(-2,2)}update(){this.x+=this.vectorX,this.y+=this.vectorY,this.checkHorizontalCollisions(),this.checkVerticalCollisions()}checkHorizontalCollisions(){const n=this.x-this.radius<=0,t=this.x+this.radius>=this.width;(n||t)&&(this.vectorX*=-1)}checkVerticalCollisions(){const n=this.y+this.radius>=this.height;(this.y-this.radius<=0||n)&&(this.vectorY*=-1)}draw(){var n,t,e,a;this.context.fillStyle="white",this.context.beginPath(),n=this.context,t=this.x,e=this.y,a=2*this.radius,n.arc(t,e,a,0,2*Math.PI),this.context.closePath(),this.context.fill()}}class O{constructor(n,t){this.canvas=n,this.context=k(this.canvas),this.particlesArray=[],this.particlesAmount=t,this.initializeArray()}initializeArray(){for(let n=0;n<this.particlesAmount;n++){const n=new J(this.context,this.canvas.width,this.canvas.height);this.particlesArray.push(n)}}animateParticles(){for(const n of this.particlesArray)n.update(),n.draw()}}const X=document.createElement("template");X.innerHTML=`\n  <style>\n    /* Reset */\n    ${M}\n    ${T}\n    ${H}\n    /* Actual style */\n    \n.web-component{\n  & > canvas {\n    position: absolute;\n\n  width: 100%;\n  height: 100%;\n  filter: invert(100%) hue-rotate(180deg);\n\n  transition: filter 600ms ease-in-out;\n\n  }\n}\n\n  /* .web-component__canvas{\n    position: absolute;\n\n    width: 100%;\n    height: 100%;\n    filter: invert(100%) hue-rotate(180deg);\n\n    transition: filter 600ms ease-in-out;\n } */\n\n @media(prefers-color-scheme:dark) {\n    .web-component__canvas{\n       filter: invert(0%) hue-rotate(0deg);\n    }\n}\n\n  </style>\n  \n  \n    <canvas class="web-component__canvas"></canvas>\n\n`;class Y extends HTMLElement{constructor(){super(),this.animateCanvas=this.animateCanvas.bind(this),this.resetCanvasToMatchScreen=this.resetCanvasToMatchScreen.bind(this);const n=this.attachShadow({mode:"open"}),t=X.content.cloneNode(!0);n.appendChild(t),this.canvas=S("canvas",this.shadowRoot),this.context=k(this.canvas),this.effectHandler=new O(this.canvas,100),this.resizeCanvas()}static get observedAttributes(){return["is-playing"]}get isPlaying(){const n=this.getAttribute("is-playing");return JSON.parse(n)}set isPlaying(n){const t=n.toString();this.setAttribute("is-playing",t)}connectedCallback(){this.effectHandler=new O(this.canvas,100),A(this.canvas,this.clientWidth,this.clientHeight),window.addEventListener("resize",this.resetCanvasToMatchScreen)}resizeCanvas(){A(this.canvas,this.clientWidth,this.clientHeight)}resetCanvasToMatchScreen(){!this.isPlaying||(this.resizeCanvas(),this.cancelCanvasAnimation(),this.effectHandler=new O(this.canvas,100),this.animateCanvas())}animateCanvas(){this.context.fillStyle="rgba(0,0,0,10%)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.effectHandler.animateParticles(),this.animationId=requestAnimationFrame(this.animateCanvas)}cancelCanvasAnimation(){cancelAnimationFrame(this.animationId)}disconnectedCallback(){window.removeEventListener("resize",this.resetCanvasToMatchScreen)}attributeChangedCallback(n,t,e){switch(n){case"is-playing":"true"===e?this.animateCanvas():this.cancelCanvasAnimation();break}}}customElements.define("moving-particles",Y),n("hello world")})()})();